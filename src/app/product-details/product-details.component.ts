import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ProductService } from '../services/product.service';
import { cart, productType } from '../data-type';
/**
 * for displaying product details
 */
@Component({
  selector: 'app-product-details',
  templateUrl: './product-details.component.html',
  styleUrls: ['./product-details.component.css']
})
export class ProductDetailsComponent implements OnInit {

 /**
  * get the list of product-details.
  * @memberof ProductDetailsComponent
  * @type {productType | undefined}
  */
  productDetails:undefined|productType;
  // variable to store the product quantity.
  productQuentity:number=1;
  
  /**
   * Create a instance for ProductService and ActiveRoute
   * @param {ActivatedRoute}activeRoute 
   * @param {ProductService} product 
   */
  constructor(private activeroute:ActivatedRoute , private product:ProductService){}

  /**
   * lifecycle hook: initializes the component.
   * fatch product details from service.
   * @memberof ProductDetailsComponent
   * @returns {void}
   */
  ngOnInit(): void {
    // get the product ID from the route parameter
    let productId= this.activeroute.snapshot.paramMap.get('productId');
    console.warn(productId);
    //fatching product details bassed on ProductID
    productId && this.product.getProduct(productId).subscribe((result)=>{
      this.productDetails= result;
      console.warn(this.productDetails);

    //Check if user is logged in and fetch cart items
      let user = localStorage.getItem('user')
      if(user){
      let userId = user && JSON.parse(user).id;
      this.product.getCartList(userId);
      this.product.cartData.subscribe((result)=>{
        result.filter((item:productType)=>productId?.toString()===item.productId?.toString())
      });
      }
    });
  }

  /**
   * To handle product Quentity.
   * @param val - The action to be performed on the quantity ('plus' or 'min').
   * @memberof ProductDetailsComponent
   * @returns {void}
   */ 
  handleQuentity(val:string){
    if(this.productQuentity<20 && val==='plus'){
      this.productQuentity+=1;
    }else if(this.productQuentity>1 && val==='min'){
      this.productQuentity-=1;
    }
  }

/**
 * add the Product to cart
 * @memberof ProductDetailsComponent
 * @returns {void}
 */
addToCart(){
  if(this.productDetails){
    //set product quentity
  this.productDetails.Quentity = this.productQuentity;
  if(!localStorage.getItem('user')){
    //Add product To localCart if user is not logged In
    this.product.localAddToCart(this.productDetails);
    console.warn(this.productDetails)
  }else{
    //get the userId 
    let user = localStorage.getItem('user')
    let userId = user && JSON.parse(user).id;
    //create an object to get the cart data with user Id and store
    let cartData:cart = {
      ...this.productDetails,
      userId,
      productId:this.productDetails.id,
    }
    //delete cart ID generated by server
    delete cartData.id;
    this.product.addToCart(cartData).subscribe((result)=>{
      if(result){
       this.product.getCartList(userId);
      }
    })
  }
 }
}
}



